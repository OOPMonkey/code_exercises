// 6.3. A shortcut task definition
task hello << {
	println 'Hello world!'
}

// Task dependencies
task intro(dependsOn: hello) << {
	println "I'm Gradle"
}

// 6.4 Build scripts are code
// Example 6.4. Using Groovy in Gradle's tasks
task upper << {
	String someString = 'mY_nAmE'
	println "Original: " + someString
	println "Uppercase: " + someString.toUpperCase()
}

// Example 6.5. Using Groovy in Gradle's tasks
task count << {
	4.times {print "$it "}
	println ""
}

// Example 6.7. Lazy dependsOn - the other task does not exist (yet)
task taskX(dependsOn: 'taskY') << {
	println 'taskX'
}

task taskY << {
	println 'taskY'
}

// Example 6.8. Dynamic creation of a task
4.times { counter ->
	task "task$counter" << {
		println "I'm task number $counter"
	}
}
task0.dependsOn task2, task3

// Example 6.10. Accessing a task via API - adding behaviour
task hello2 << {
	println 'Hello Earth'
}

hello2.doFirst {
	println 'Hello Venus'
}

hello2.doLast {
	println	'Hello Mars'
}

hello2 << {
	println 'Hello Jupiter'
}

// Example 6.11. Accessing task as a property of the build script
hello.doLast {
	println "Greetings from the $hello.name task."
}

// Example 6.12. Adding extra properties to a task
task myTask {
	ext.myProperty = "myValue"
}

task printTaskProperties << {
	println myTask.myProperty
}

// Example 6.13. Using AntBuilder to execute ant.loadfile target
task loadfile << {
    def files = file('../antLoadfileResources').listFiles().sort()
    files.each { File file ->
        if (file.isFile()) {
            ant.loadfile(srcFile: file, property: file.name)
            println " *** $file.name ***"
            println "${ant.properties[file.name]}"
        }
    }
}

// Example 6.14. Using methods to organize your build logic
//task checksum << {
//    fileList('../antLoadfileResources').each {File file ->
//        ant.checksum(file: file, property: "cs_$file.name")
//        println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
//    }
//}

//task loadfile << {
//    fileList('../antLoadfileResources').each {File file ->
//        ant.loadfile(srcFile: file, property: file.name)
//        println "I'm fond of $file.name"
//    }
//}

//File[] fileList(String dir) {
//    file(dir).listFiles({file -> file.isFile() } as FileFilter).sort()
//}

// Example 6.15. Defining a default tasks
defaultTasks 'clean', 'run'

task clean << {
	println 'Default Cleaning!'
}

task run << {
	println 'Default Running!'
}

task other << {
	println "I'm not a default task!"
}

// Example 6.16. Different outcomes of build depending on chosen tasks
task distribution << {
	println "We build the zip with version=$version"
}

task release(dependsOn: 'distribution') << {
	println 'We release now'
}

gradle.taskGraph.whenReady {taskGraph ->
	if (taskGraph.hasTask(release)) {
		version = '1.0'
	}
	else {
		version = '1.0-SNAPSHOT'
	}
}